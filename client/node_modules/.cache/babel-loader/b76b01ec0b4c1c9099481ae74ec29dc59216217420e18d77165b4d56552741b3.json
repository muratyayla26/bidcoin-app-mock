{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.normalizeVersion = exports.isNewerOrEqual = exports.isEqual = exports.isNewer = exports.isVersionArray = void 0;\nconst isVersionArray = arr => {\n  if (!Array.isArray(arr)) {\n    return false;\n  }\n  if (arr.length !== 3) {\n    return false;\n  }\n  for (let i = 0; i < arr.length; i++) {\n    const versionNumber = arr[i];\n    if (typeof versionNumber !== 'number' || versionNumber < 0) {\n      return false;\n    }\n  }\n  return true;\n};\nexports.isVersionArray = isVersionArray;\nconst parse = versionArr => ({\n  major: versionArr[0],\n  minor: versionArr[1],\n  patch: versionArr[2]\n});\nconst split = version => {\n  const arr = version.split('.').map(v => Number(v));\n  if (!(0, exports.isVersionArray)(arr)) {\n    throw new Error(`version string is in wrong format: ${version}`);\n  }\n  return arr;\n};\nconst versionToString = arr => `${arr[0]}.${arr[1]}.${arr[2]}`;\nconst isNewer = (versionX, versionY) => {\n  const parsedX = parse(typeof versionX === 'string' ? split(versionX) : versionX);\n  const parsedY = parse(typeof versionY === 'string' ? split(versionY) : versionY);\n  if (parsedX.major - parsedY.major !== 0) {\n    return parsedX.major > parsedY.major;\n  }\n  if (parsedX.minor - parsedY.minor !== 0) {\n    return parsedX.minor > parsedY.minor;\n  }\n  if (parsedX.patch - parsedY.patch !== 0) {\n    return parsedX.patch > parsedY.patch;\n  }\n  return false;\n};\nexports.isNewer = isNewer;\nconst isEqual = (versionX, versionY) => {\n  const strX = typeof versionX === 'string' ? versionX : versionToString(versionX);\n  const strY = typeof versionY === 'string' ? versionY : versionToString(versionY);\n  return strX === strY;\n};\nexports.isEqual = isEqual;\nconst isNewerOrEqual = (versionX, versionY) => (0, exports.isNewer)(versionX, versionY) || (0, exports.isEqual)(versionX, versionY);\nexports.isNewerOrEqual = isNewerOrEqual;\nconst normalizeVersion = version => version.replace(/\\b0+(\\d)/g, '$1');\nexports.normalizeVersion = normalizeVersion;","map":{"version":3,"names":["Object","defineProperty","exports","value","normalizeVersion","isNewerOrEqual","isEqual","isNewer","isVersionArray","arr","Array","isArray","length","i","versionNumber","parse","versionArr","major","minor","patch","split","version","map","v","Number","Error","versionToString","versionX","versionY","parsedX","parsedY","strX","strY","replace"],"sources":["C:/Users/Administrator/solana-wallet-app/node_modules/@trezor/utils/lib/versionUtils.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.normalizeVersion = exports.isNewerOrEqual = exports.isEqual = exports.isNewer = exports.isVersionArray = void 0;\nconst isVersionArray = (arr) => {\n    if (!Array.isArray(arr)) {\n        return false;\n    }\n    if (arr.length !== 3) {\n        return false;\n    }\n    for (let i = 0; i < arr.length; i++) {\n        const versionNumber = arr[i];\n        if (typeof versionNumber !== 'number' || versionNumber < 0) {\n            return false;\n        }\n    }\n    return true;\n};\nexports.isVersionArray = isVersionArray;\nconst parse = (versionArr) => ({\n    major: versionArr[0],\n    minor: versionArr[1],\n    patch: versionArr[2],\n});\nconst split = (version) => {\n    const arr = version.split('.').map(v => Number(v));\n    if (!(0, exports.isVersionArray)(arr)) {\n        throw new Error(`version string is in wrong format: ${version}`);\n    }\n    return arr;\n};\nconst versionToString = (arr) => `${arr[0]}.${arr[1]}.${arr[2]}`;\nconst isNewer = (versionX, versionY) => {\n    const parsedX = parse(typeof versionX === 'string' ? split(versionX) : versionX);\n    const parsedY = parse(typeof versionY === 'string' ? split(versionY) : versionY);\n    if (parsedX.major - parsedY.major !== 0) {\n        return parsedX.major > parsedY.major;\n    }\n    if (parsedX.minor - parsedY.minor !== 0) {\n        return parsedX.minor > parsedY.minor;\n    }\n    if (parsedX.patch - parsedY.patch !== 0) {\n        return parsedX.patch > parsedY.patch;\n    }\n    return false;\n};\nexports.isNewer = isNewer;\nconst isEqual = (versionX, versionY) => {\n    const strX = typeof versionX === 'string' ? versionX : versionToString(versionX);\n    const strY = typeof versionY === 'string' ? versionY : versionToString(versionY);\n    return strX === strY;\n};\nexports.isEqual = isEqual;\nconst isNewerOrEqual = (versionX, versionY) => (0, exports.isNewer)(versionX, versionY) || (0, exports.isEqual)(versionX, versionY);\nexports.isNewerOrEqual = isNewerOrEqual;\nconst normalizeVersion = (version) => version.replace(/\\b0+(\\d)/g, '$1');\nexports.normalizeVersion = normalizeVersion;\n//# sourceMappingURL=versionUtils.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}