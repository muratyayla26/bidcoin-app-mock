{"ast":null,"code":"\"use strict\";\n\n/*--------------------------------------------------------------------------\n\n@sinclair/typebox/system\n\nThe MIT License (MIT)\n\nCopyright (c) 2017-2023 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DefaultErrorFunction = exports.TypeSystemPolicy = exports.TypeSystemErrorFunction = exports.TypeSystem = exports.TypeSystemDuplicateFormat = exports.TypeSystemDuplicateTypeKind = void 0;\nconst guard_1 = require(\"../value/guard\");\nconst errors_1 = require(\"../errors/errors\");\nconst Types = require(\"../typebox\");\n// --------------------------------------------------------------------------\n// Errors\n// --------------------------------------------------------------------------\nclass TypeSystemDuplicateTypeKind extends Types.TypeBoxError {\n  constructor(kind) {\n    super(`Duplicate type kind '${kind}' detected`);\n  }\n}\nexports.TypeSystemDuplicateTypeKind = TypeSystemDuplicateTypeKind;\nclass TypeSystemDuplicateFormat extends Types.TypeBoxError {\n  constructor(kind) {\n    super(`Duplicate string format '${kind}' detected`);\n  }\n}\nexports.TypeSystemDuplicateFormat = TypeSystemDuplicateFormat;\n// -------------------------------------------------------------------------------------------\n// TypeSystem\n// -------------------------------------------------------------------------------------------\n/** Creates user defined types and formats and provides overrides for value checking behaviours */\nvar TypeSystem;\n(function (TypeSystem) {\n  /** Creates a new type */\n  function Type(kind, check) {\n    if (Types.TypeRegistry.Has(kind)) throw new TypeSystemDuplicateTypeKind(kind);\n    Types.TypeRegistry.Set(kind, check);\n    return (options = {}) => Types.Type.Unsafe({\n      ...options,\n      [Types.Kind]: kind\n    });\n  }\n  TypeSystem.Type = Type;\n  /** Creates a new string format */\n  function Format(format, check) {\n    if (Types.FormatRegistry.Has(format)) throw new TypeSystemDuplicateFormat(format);\n    Types.FormatRegistry.Set(format, check);\n    return format;\n  }\n  TypeSystem.Format = Format;\n})(TypeSystem || (exports.TypeSystem = TypeSystem = {}));\n// --------------------------------------------------------------------------\n// TypeSystemErrorFunction\n// --------------------------------------------------------------------------\n/** Manages error message providers */\nvar TypeSystemErrorFunction;\n(function (TypeSystemErrorFunction) {\n  let errorMessageFunction = DefaultErrorFunction;\n  /** Resets the error message function to en-us */\n  function Reset() {\n    errorMessageFunction = DefaultErrorFunction;\n  }\n  TypeSystemErrorFunction.Reset = Reset;\n  /** Sets the error message function used to generate error messages */\n  function Set(callback) {\n    errorMessageFunction = callback;\n  }\n  TypeSystemErrorFunction.Set = Set;\n  /** Gets the error message function */\n  function Get() {\n    return errorMessageFunction;\n  }\n  TypeSystemErrorFunction.Get = Get;\n})(TypeSystemErrorFunction || (exports.TypeSystemErrorFunction = TypeSystemErrorFunction = {}));\n// --------------------------------------------------------------------------\n// TypeSystemPolicy\n// --------------------------------------------------------------------------\n/** Shared assertion routines used by the value and errors modules */\nvar TypeSystemPolicy;\n(function (TypeSystemPolicy) {\n  /** Sets whether TypeBox should assert optional properties using the TypeScript `exactOptionalPropertyTypes` assertion policy. The default is `false` */\n  TypeSystemPolicy.ExactOptionalPropertyTypes = false;\n  /** Sets whether arrays should be treated as a kind of objects. The default is `false` */\n  TypeSystemPolicy.AllowArrayObject = false;\n  /** Sets whether `NaN` or `Infinity` should be treated as valid numeric values. The default is `false` */\n  TypeSystemPolicy.AllowNaN = false;\n  /** Sets whether `null` should validate for void types. The default is `false` */\n  TypeSystemPolicy.AllowNullVoid = false;\n  /** Asserts this value using the ExactOptionalPropertyTypes policy */\n  function IsExactOptionalProperty(value, key) {\n    return TypeSystemPolicy.ExactOptionalPropertyTypes ? key in value : value[key] !== undefined;\n  }\n  TypeSystemPolicy.IsExactOptionalProperty = IsExactOptionalProperty;\n  /** Asserts this value using the AllowArrayObjects policy */\n  function IsObjectLike(value) {\n    const isObject = (0, guard_1.IsObject)(value);\n    return TypeSystemPolicy.AllowArrayObject ? isObject : isObject && !(0, guard_1.IsArray)(value);\n  }\n  TypeSystemPolicy.IsObjectLike = IsObjectLike;\n  /** Asserts this value as a record using the AllowArrayObjects policy */\n  function IsRecordLike(value) {\n    return IsObjectLike(value) && !(value instanceof Date) && !(value instanceof Uint8Array);\n  }\n  TypeSystemPolicy.IsRecordLike = IsRecordLike;\n  /** Asserts this value using the AllowNaN policy */\n  function IsNumberLike(value) {\n    const isNumber = (0, guard_1.IsNumber)(value);\n    return TypeSystemPolicy.AllowNaN ? isNumber : isNumber && Number.isFinite(value);\n  }\n  TypeSystemPolicy.IsNumberLike = IsNumberLike;\n  /** Asserts this value using the AllowVoidNull policy */\n  function IsVoidLike(value) {\n    const isUndefined = (0, guard_1.IsUndefined)(value);\n    return TypeSystemPolicy.AllowNullVoid ? isUndefined || value === null : isUndefined;\n  }\n  TypeSystemPolicy.IsVoidLike = IsVoidLike;\n})(TypeSystemPolicy || (exports.TypeSystemPolicy = TypeSystemPolicy = {}));\n// --------------------------------------------------------------------------\n// DefaultErrorFunction\n// --------------------------------------------------------------------------\n/** Creates an error message using en-US as the default locale */\nfunction DefaultErrorFunction(schema, errorType) {\n  switch (errorType) {\n    case errors_1.ValueErrorType.ArrayContains:\n      return 'Expected array to contain at least one matching value';\n    case errors_1.ValueErrorType.ArrayMaxContains:\n      return `Expected array to contain no more than ${schema.maxContains} matching values`;\n    case errors_1.ValueErrorType.ArrayMinContains:\n      return `Expected array to contain at least ${schema.minContains} matching values`;\n    case errors_1.ValueErrorType.ArrayMaxItems:\n      return `Expected array length to be less or equal to ${schema.maxItems}`;\n    case errors_1.ValueErrorType.ArrayMinItems:\n      return `Expected array length to be greater or equal to ${schema.minItems}`;\n    case errors_1.ValueErrorType.ArrayUniqueItems:\n      return 'Expected array elements to be unique';\n    case errors_1.ValueErrorType.Array:\n      return 'Expected array';\n    case errors_1.ValueErrorType.AsyncIterator:\n      return 'Expected AsyncIterator';\n    case errors_1.ValueErrorType.BigIntExclusiveMaximum:\n      return `Expected bigint to be less than ${schema.exclusiveMaximum}`;\n    case errors_1.ValueErrorType.BigIntExclusiveMinimum:\n      return `Expected bigint to be greater than ${schema.exclusiveMinimum}`;\n    case errors_1.ValueErrorType.BigIntMaximum:\n      return `Expected bigint to be less or equal to ${schema.maximum}`;\n    case errors_1.ValueErrorType.BigIntMinimum:\n      return `Expected bigint to be greater or equal to ${schema.minimum}`;\n    case errors_1.ValueErrorType.BigIntMultipleOf:\n      return `Expected bigint to be a multiple of ${schema.multipleOf}`;\n    case errors_1.ValueErrorType.BigInt:\n      return 'Expected bigint';\n    case errors_1.ValueErrorType.Boolean:\n      return 'Expected boolean';\n    case errors_1.ValueErrorType.DateExclusiveMinimumTimestamp:\n      return `Expected Date timestamp to be greater than ${schema.exclusiveMinimumTimestamp}`;\n    case errors_1.ValueErrorType.DateExclusiveMaximumTimestamp:\n      return `Expected Date timestamp to be less than ${schema.exclusiveMaximumTimestamp}`;\n    case errors_1.ValueErrorType.DateMinimumTimestamp:\n      return `Expected Date timestamp to be greater or equal to ${schema.minimumTimestamp}`;\n    case errors_1.ValueErrorType.DateMaximumTimestamp:\n      return `Expected Date timestamp to be less or equal to ${schema.maximumTimestamp}`;\n    case errors_1.ValueErrorType.DateMultipleOfTimestamp:\n      return `Expected Date timestamp to be a multiple of ${schema.multipleOfTimestamp}`;\n    case errors_1.ValueErrorType.Date:\n      return 'Expected Date';\n    case errors_1.ValueErrorType.Function:\n      return 'Expected function';\n    case errors_1.ValueErrorType.IntegerExclusiveMaximum:\n      return `Expected integer to be less than ${schema.exclusiveMaximum}`;\n    case errors_1.ValueErrorType.IntegerExclusiveMinimum:\n      return `Expected integer to be greater than ${schema.exclusiveMinimum}`;\n    case errors_1.ValueErrorType.IntegerMaximum:\n      return `Expected integer to be less or equal to ${schema.maximum}`;\n    case errors_1.ValueErrorType.IntegerMinimum:\n      return `Expected integer to be greater or equal to ${schema.minimum}`;\n    case errors_1.ValueErrorType.IntegerMultipleOf:\n      return `Expected integer to be a multiple of ${schema.multipleOf}`;\n    case errors_1.ValueErrorType.Integer:\n      return 'Expected integer';\n    case errors_1.ValueErrorType.IntersectUnevaluatedProperties:\n      return 'Unexpected property';\n    case errors_1.ValueErrorType.Intersect:\n      return 'Expected all values to match';\n    case errors_1.ValueErrorType.Iterator:\n      return 'Expected Iterator';\n    case errors_1.ValueErrorType.Literal:\n      return `Expected ${typeof schema.const === 'string' ? `'${schema.const}'` : schema.const}`;\n    case errors_1.ValueErrorType.Never:\n      return 'Never';\n    case errors_1.ValueErrorType.Not:\n      return 'Value should not match';\n    case errors_1.ValueErrorType.Null:\n      return 'Expected null';\n    case errors_1.ValueErrorType.NumberExclusiveMaximum:\n      return `Expected number to be less than ${schema.exclusiveMaximum}`;\n    case errors_1.ValueErrorType.NumberExclusiveMinimum:\n      return `Expected number to be greater than ${schema.exclusiveMinimum}`;\n    case errors_1.ValueErrorType.NumberMaximum:\n      return `Expected number to be less or equal to ${schema.maximum}`;\n    case errors_1.ValueErrorType.NumberMinimum:\n      return `Expected number to be greater or equal to ${schema.minimum}`;\n    case errors_1.ValueErrorType.NumberMultipleOf:\n      return `Expected number to be a multiple of ${schema.multipleOf}`;\n    case errors_1.ValueErrorType.Number:\n      return 'Expected number';\n    case errors_1.ValueErrorType.Object:\n      return 'Expected object';\n    case errors_1.ValueErrorType.ObjectAdditionalProperties:\n      return 'Unexpected property';\n    case errors_1.ValueErrorType.ObjectMaxProperties:\n      return `Expected object to have no more than ${schema.maxProperties} properties`;\n    case errors_1.ValueErrorType.ObjectMinProperties:\n      return `Expected object to have at least ${schema.minProperties} properties`;\n    case errors_1.ValueErrorType.ObjectRequiredProperty:\n      return 'Required property';\n    case errors_1.ValueErrorType.Promise:\n      return 'Expected Promise';\n    case errors_1.ValueErrorType.StringFormatUnknown:\n      return `Unknown format '${schema.format}'`;\n    case errors_1.ValueErrorType.StringFormat:\n      return `Expected string to match '${schema.format}' format`;\n    case errors_1.ValueErrorType.StringMaxLength:\n      return `Expected string length less or equal to ${schema.maxLength}`;\n    case errors_1.ValueErrorType.StringMinLength:\n      return `Expected string length greater or equal to ${schema.minLength}`;\n    case errors_1.ValueErrorType.StringPattern:\n      return `Expected string to match '${schema.pattern}'`;\n    case errors_1.ValueErrorType.String:\n      return 'Expected string';\n    case errors_1.ValueErrorType.Symbol:\n      return 'Expected symbol';\n    case errors_1.ValueErrorType.TupleLength:\n      return `Expected tuple to have ${schema.maxItems || 0} elements`;\n    case errors_1.ValueErrorType.Tuple:\n      return 'Expected tuple';\n    case errors_1.ValueErrorType.Uint8ArrayMaxByteLength:\n      return `Expected byte length less or equal to ${schema.maxByteLength}`;\n    case errors_1.ValueErrorType.Uint8ArrayMinByteLength:\n      return `Expected byte length greater or equal to ${schema.minByteLength}`;\n    case errors_1.ValueErrorType.Uint8Array:\n      return 'Expected Uint8Array';\n    case errors_1.ValueErrorType.Undefined:\n      return 'Expected undefined';\n    case errors_1.ValueErrorType.Union:\n      return 'Expected union value';\n    case errors_1.ValueErrorType.Void:\n      return 'Expected void';\n    case errors_1.ValueErrorType.Kind:\n      return `Expected kind '${schema[Types.Kind]}'`;\n    default:\n      return 'Unknown error type';\n  }\n}\nexports.DefaultErrorFunction = DefaultErrorFunction;","map":{"version":3,"names":["Object","defineProperty","exports","value","DefaultErrorFunction","TypeSystemPolicy","TypeSystemErrorFunction","TypeSystem","TypeSystemDuplicateFormat","TypeSystemDuplicateTypeKind","guard_1","require","errors_1","Types","TypeBoxError","constructor","kind","Type","check","TypeRegistry","Has","Set","options","Unsafe","Kind","Format","format","FormatRegistry","errorMessageFunction","Reset","callback","Get","ExactOptionalPropertyTypes","AllowArrayObject","AllowNaN","AllowNullVoid","IsExactOptionalProperty","key","undefined","IsObjectLike","isObject","IsObject","IsArray","IsRecordLike","Date","Uint8Array","IsNumberLike","isNumber","IsNumber","Number","isFinite","IsVoidLike","isUndefined","IsUndefined","schema","errorType","ValueErrorType","ArrayContains","ArrayMaxContains","maxContains","ArrayMinContains","minContains","ArrayMaxItems","maxItems","ArrayMinItems","minItems","ArrayUniqueItems","Array","AsyncIterator","BigIntExclusiveMaximum","exclusiveMaximum","BigIntExclusiveMinimum","exclusiveMinimum","BigIntMaximum","maximum","BigIntMinimum","minimum","BigIntMultipleOf","multipleOf","BigInt","Boolean","DateExclusiveMinimumTimestamp","exclusiveMinimumTimestamp","DateExclusiveMaximumTimestamp","exclusiveMaximumTimestamp","DateMinimumTimestamp","minimumTimestamp","DateMaximumTimestamp","maximumTimestamp","DateMultipleOfTimestamp","multipleOfTimestamp","Function","IntegerExclusiveMaximum","IntegerExclusiveMinimum","IntegerMaximum","IntegerMinimum","IntegerMultipleOf","Integer","IntersectUnevaluatedProperties","Intersect","Iterator","Literal","const","Never","Not","Null","NumberExclusiveMaximum","NumberExclusiveMinimum","NumberMaximum","NumberMinimum","NumberMultipleOf","ObjectAdditionalProperties","ObjectMaxProperties","maxProperties","ObjectMinProperties","minProperties","ObjectRequiredProperty","Promise","StringFormatUnknown","StringFormat","StringMaxLength","maxLength","StringMinLength","minLength","StringPattern","pattern","String","Symbol","TupleLength","Tuple","Uint8ArrayMaxByteLength","maxByteLength","Uint8ArrayMinByteLength","minByteLength","Undefined","Union","Void"],"sources":["C:/Users/Administrator/solana-wallet-app/node_modules/@trezor/schema-utils/node_modules/@sinclair/typebox/system/system.js"],"sourcesContent":["\"use strict\";\n/*--------------------------------------------------------------------------\n\n@sinclair/typebox/system\n\nThe MIT License (MIT)\n\nCopyright (c) 2017-2023 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DefaultErrorFunction = exports.TypeSystemPolicy = exports.TypeSystemErrorFunction = exports.TypeSystem = exports.TypeSystemDuplicateFormat = exports.TypeSystemDuplicateTypeKind = void 0;\nconst guard_1 = require(\"../value/guard\");\nconst errors_1 = require(\"../errors/errors\");\nconst Types = require(\"../typebox\");\n// --------------------------------------------------------------------------\n// Errors\n// --------------------------------------------------------------------------\nclass TypeSystemDuplicateTypeKind extends Types.TypeBoxError {\n    constructor(kind) {\n        super(`Duplicate type kind '${kind}' detected`);\n    }\n}\nexports.TypeSystemDuplicateTypeKind = TypeSystemDuplicateTypeKind;\nclass TypeSystemDuplicateFormat extends Types.TypeBoxError {\n    constructor(kind) {\n        super(`Duplicate string format '${kind}' detected`);\n    }\n}\nexports.TypeSystemDuplicateFormat = TypeSystemDuplicateFormat;\n// -------------------------------------------------------------------------------------------\n// TypeSystem\n// -------------------------------------------------------------------------------------------\n/** Creates user defined types and formats and provides overrides for value checking behaviours */\nvar TypeSystem;\n(function (TypeSystem) {\n    /** Creates a new type */\n    function Type(kind, check) {\n        if (Types.TypeRegistry.Has(kind))\n            throw new TypeSystemDuplicateTypeKind(kind);\n        Types.TypeRegistry.Set(kind, check);\n        return (options = {}) => Types.Type.Unsafe({ ...options, [Types.Kind]: kind });\n    }\n    TypeSystem.Type = Type;\n    /** Creates a new string format */\n    function Format(format, check) {\n        if (Types.FormatRegistry.Has(format))\n            throw new TypeSystemDuplicateFormat(format);\n        Types.FormatRegistry.Set(format, check);\n        return format;\n    }\n    TypeSystem.Format = Format;\n})(TypeSystem || (exports.TypeSystem = TypeSystem = {}));\n// --------------------------------------------------------------------------\n// TypeSystemErrorFunction\n// --------------------------------------------------------------------------\n/** Manages error message providers */\nvar TypeSystemErrorFunction;\n(function (TypeSystemErrorFunction) {\n    let errorMessageFunction = DefaultErrorFunction;\n    /** Resets the error message function to en-us */\n    function Reset() {\n        errorMessageFunction = DefaultErrorFunction;\n    }\n    TypeSystemErrorFunction.Reset = Reset;\n    /** Sets the error message function used to generate error messages */\n    function Set(callback) {\n        errorMessageFunction = callback;\n    }\n    TypeSystemErrorFunction.Set = Set;\n    /** Gets the error message function */\n    function Get() {\n        return errorMessageFunction;\n    }\n    TypeSystemErrorFunction.Get = Get;\n})(TypeSystemErrorFunction || (exports.TypeSystemErrorFunction = TypeSystemErrorFunction = {}));\n// --------------------------------------------------------------------------\n// TypeSystemPolicy\n// --------------------------------------------------------------------------\n/** Shared assertion routines used by the value and errors modules */\nvar TypeSystemPolicy;\n(function (TypeSystemPolicy) {\n    /** Sets whether TypeBox should assert optional properties using the TypeScript `exactOptionalPropertyTypes` assertion policy. The default is `false` */\n    TypeSystemPolicy.ExactOptionalPropertyTypes = false;\n    /** Sets whether arrays should be treated as a kind of objects. The default is `false` */\n    TypeSystemPolicy.AllowArrayObject = false;\n    /** Sets whether `NaN` or `Infinity` should be treated as valid numeric values. The default is `false` */\n    TypeSystemPolicy.AllowNaN = false;\n    /** Sets whether `null` should validate for void types. The default is `false` */\n    TypeSystemPolicy.AllowNullVoid = false;\n    /** Asserts this value using the ExactOptionalPropertyTypes policy */\n    function IsExactOptionalProperty(value, key) {\n        return TypeSystemPolicy.ExactOptionalPropertyTypes ? key in value : value[key] !== undefined;\n    }\n    TypeSystemPolicy.IsExactOptionalProperty = IsExactOptionalProperty;\n    /** Asserts this value using the AllowArrayObjects policy */\n    function IsObjectLike(value) {\n        const isObject = (0, guard_1.IsObject)(value);\n        return TypeSystemPolicy.AllowArrayObject ? isObject : isObject && !(0, guard_1.IsArray)(value);\n    }\n    TypeSystemPolicy.IsObjectLike = IsObjectLike;\n    /** Asserts this value as a record using the AllowArrayObjects policy */\n    function IsRecordLike(value) {\n        return IsObjectLike(value) && !(value instanceof Date) && !(value instanceof Uint8Array);\n    }\n    TypeSystemPolicy.IsRecordLike = IsRecordLike;\n    /** Asserts this value using the AllowNaN policy */\n    function IsNumberLike(value) {\n        const isNumber = (0, guard_1.IsNumber)(value);\n        return TypeSystemPolicy.AllowNaN ? isNumber : isNumber && Number.isFinite(value);\n    }\n    TypeSystemPolicy.IsNumberLike = IsNumberLike;\n    /** Asserts this value using the AllowVoidNull policy */\n    function IsVoidLike(value) {\n        const isUndefined = (0, guard_1.IsUndefined)(value);\n        return TypeSystemPolicy.AllowNullVoid ? isUndefined || value === null : isUndefined;\n    }\n    TypeSystemPolicy.IsVoidLike = IsVoidLike;\n})(TypeSystemPolicy || (exports.TypeSystemPolicy = TypeSystemPolicy = {}));\n// --------------------------------------------------------------------------\n// DefaultErrorFunction\n// --------------------------------------------------------------------------\n/** Creates an error message using en-US as the default locale */\nfunction DefaultErrorFunction(schema, errorType) {\n    switch (errorType) {\n        case errors_1.ValueErrorType.ArrayContains:\n            return 'Expected array to contain at least one matching value';\n        case errors_1.ValueErrorType.ArrayMaxContains:\n            return `Expected array to contain no more than ${schema.maxContains} matching values`;\n        case errors_1.ValueErrorType.ArrayMinContains:\n            return `Expected array to contain at least ${schema.minContains} matching values`;\n        case errors_1.ValueErrorType.ArrayMaxItems:\n            return `Expected array length to be less or equal to ${schema.maxItems}`;\n        case errors_1.ValueErrorType.ArrayMinItems:\n            return `Expected array length to be greater or equal to ${schema.minItems}`;\n        case errors_1.ValueErrorType.ArrayUniqueItems:\n            return 'Expected array elements to be unique';\n        case errors_1.ValueErrorType.Array:\n            return 'Expected array';\n        case errors_1.ValueErrorType.AsyncIterator:\n            return 'Expected AsyncIterator';\n        case errors_1.ValueErrorType.BigIntExclusiveMaximum:\n            return `Expected bigint to be less than ${schema.exclusiveMaximum}`;\n        case errors_1.ValueErrorType.BigIntExclusiveMinimum:\n            return `Expected bigint to be greater than ${schema.exclusiveMinimum}`;\n        case errors_1.ValueErrorType.BigIntMaximum:\n            return `Expected bigint to be less or equal to ${schema.maximum}`;\n        case errors_1.ValueErrorType.BigIntMinimum:\n            return `Expected bigint to be greater or equal to ${schema.minimum}`;\n        case errors_1.ValueErrorType.BigIntMultipleOf:\n            return `Expected bigint to be a multiple of ${schema.multipleOf}`;\n        case errors_1.ValueErrorType.BigInt:\n            return 'Expected bigint';\n        case errors_1.ValueErrorType.Boolean:\n            return 'Expected boolean';\n        case errors_1.ValueErrorType.DateExclusiveMinimumTimestamp:\n            return `Expected Date timestamp to be greater than ${schema.exclusiveMinimumTimestamp}`;\n        case errors_1.ValueErrorType.DateExclusiveMaximumTimestamp:\n            return `Expected Date timestamp to be less than ${schema.exclusiveMaximumTimestamp}`;\n        case errors_1.ValueErrorType.DateMinimumTimestamp:\n            return `Expected Date timestamp to be greater or equal to ${schema.minimumTimestamp}`;\n        case errors_1.ValueErrorType.DateMaximumTimestamp:\n            return `Expected Date timestamp to be less or equal to ${schema.maximumTimestamp}`;\n        case errors_1.ValueErrorType.DateMultipleOfTimestamp:\n            return `Expected Date timestamp to be a multiple of ${schema.multipleOfTimestamp}`;\n        case errors_1.ValueErrorType.Date:\n            return 'Expected Date';\n        case errors_1.ValueErrorType.Function:\n            return 'Expected function';\n        case errors_1.ValueErrorType.IntegerExclusiveMaximum:\n            return `Expected integer to be less than ${schema.exclusiveMaximum}`;\n        case errors_1.ValueErrorType.IntegerExclusiveMinimum:\n            return `Expected integer to be greater than ${schema.exclusiveMinimum}`;\n        case errors_1.ValueErrorType.IntegerMaximum:\n            return `Expected integer to be less or equal to ${schema.maximum}`;\n        case errors_1.ValueErrorType.IntegerMinimum:\n            return `Expected integer to be greater or equal to ${schema.minimum}`;\n        case errors_1.ValueErrorType.IntegerMultipleOf:\n            return `Expected integer to be a multiple of ${schema.multipleOf}`;\n        case errors_1.ValueErrorType.Integer:\n            return 'Expected integer';\n        case errors_1.ValueErrorType.IntersectUnevaluatedProperties:\n            return 'Unexpected property';\n        case errors_1.ValueErrorType.Intersect:\n            return 'Expected all values to match';\n        case errors_1.ValueErrorType.Iterator:\n            return 'Expected Iterator';\n        case errors_1.ValueErrorType.Literal:\n            return `Expected ${typeof schema.const === 'string' ? `'${schema.const}'` : schema.const}`;\n        case errors_1.ValueErrorType.Never:\n            return 'Never';\n        case errors_1.ValueErrorType.Not:\n            return 'Value should not match';\n        case errors_1.ValueErrorType.Null:\n            return 'Expected null';\n        case errors_1.ValueErrorType.NumberExclusiveMaximum:\n            return `Expected number to be less than ${schema.exclusiveMaximum}`;\n        case errors_1.ValueErrorType.NumberExclusiveMinimum:\n            return `Expected number to be greater than ${schema.exclusiveMinimum}`;\n        case errors_1.ValueErrorType.NumberMaximum:\n            return `Expected number to be less or equal to ${schema.maximum}`;\n        case errors_1.ValueErrorType.NumberMinimum:\n            return `Expected number to be greater or equal to ${schema.minimum}`;\n        case errors_1.ValueErrorType.NumberMultipleOf:\n            return `Expected number to be a multiple of ${schema.multipleOf}`;\n        case errors_1.ValueErrorType.Number:\n            return 'Expected number';\n        case errors_1.ValueErrorType.Object:\n            return 'Expected object';\n        case errors_1.ValueErrorType.ObjectAdditionalProperties:\n            return 'Unexpected property';\n        case errors_1.ValueErrorType.ObjectMaxProperties:\n            return `Expected object to have no more than ${schema.maxProperties} properties`;\n        case errors_1.ValueErrorType.ObjectMinProperties:\n            return `Expected object to have at least ${schema.minProperties} properties`;\n        case errors_1.ValueErrorType.ObjectRequiredProperty:\n            return 'Required property';\n        case errors_1.ValueErrorType.Promise:\n            return 'Expected Promise';\n        case errors_1.ValueErrorType.StringFormatUnknown:\n            return `Unknown format '${schema.format}'`;\n        case errors_1.ValueErrorType.StringFormat:\n            return `Expected string to match '${schema.format}' format`;\n        case errors_1.ValueErrorType.StringMaxLength:\n            return `Expected string length less or equal to ${schema.maxLength}`;\n        case errors_1.ValueErrorType.StringMinLength:\n            return `Expected string length greater or equal to ${schema.minLength}`;\n        case errors_1.ValueErrorType.StringPattern:\n            return `Expected string to match '${schema.pattern}'`;\n        case errors_1.ValueErrorType.String:\n            return 'Expected string';\n        case errors_1.ValueErrorType.Symbol:\n            return 'Expected symbol';\n        case errors_1.ValueErrorType.TupleLength:\n            return `Expected tuple to have ${schema.maxItems || 0} elements`;\n        case errors_1.ValueErrorType.Tuple:\n            return 'Expected tuple';\n        case errors_1.ValueErrorType.Uint8ArrayMaxByteLength:\n            return `Expected byte length less or equal to ${schema.maxByteLength}`;\n        case errors_1.ValueErrorType.Uint8ArrayMinByteLength:\n            return `Expected byte length greater or equal to ${schema.minByteLength}`;\n        case errors_1.ValueErrorType.Uint8Array:\n            return 'Expected Uint8Array';\n        case errors_1.ValueErrorType.Undefined:\n            return 'Expected undefined';\n        case errors_1.ValueErrorType.Union:\n            return 'Expected union value';\n        case errors_1.ValueErrorType.Void:\n            return 'Expected void';\n        case errors_1.ValueErrorType.Kind:\n            return `Expected kind '${schema[Types.Kind]}'`;\n        default:\n            return 'Unknown error type';\n    }\n}\nexports.DefaultErrorFunction = DefaultErrorFunction;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}