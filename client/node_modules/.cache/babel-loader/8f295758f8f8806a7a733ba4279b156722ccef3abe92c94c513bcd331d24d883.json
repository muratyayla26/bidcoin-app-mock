{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport EventEmitter from 'eventemitter3';\nimport { PublicKey } from '@solana/web3.js';\nimport bs58 from 'bs58';\nexport default class Wallet extends EventEmitter {\n  constructor(provider, _network) {\n    super();\n    this._network = _network;\n    this._publicKey = null;\n    this._popup = null;\n    this._handlerAdded = false;\n    this._nextRequestId = 1;\n    this._autoApprove = false;\n    this._responsePromises = new Map();\n    this.handleMessage = e => {\n      var _a;\n      if (this._injectedProvider && e.source === window || e.origin === ((_a = this._providerUrl) === null || _a === void 0 ? void 0 : _a.origin) && e.source === this._popup) {\n        if (e.data.method === 'connected') {\n          const newPublicKey = new PublicKey(e.data.params.publicKey);\n          if (!this._publicKey || !this._publicKey.equals(newPublicKey)) {\n            if (this._publicKey && !this._publicKey.equals(newPublicKey)) {\n              this.handleDisconnect();\n            }\n            this._publicKey = newPublicKey;\n            this._autoApprove = !!e.data.params.autoApprove;\n            this.emit('connect', this._publicKey);\n          }\n        } else if (e.data.method === 'disconnected') {\n          this.handleDisconnect();\n        } else if (e.data.result || e.data.error) {\n          const promises = this._responsePromises.get(e.data.id);\n          if (promises) {\n            const [resolve, reject] = promises;\n            if (e.data.result) {\n              resolve(e.data.result);\n            } else {\n              reject(new Error(e.data.error));\n            }\n          }\n        }\n      }\n    };\n    this._beforeUnload = () => {\n      void this.disconnect();\n    };\n    if (isInjectedProvider(provider)) {\n      this._injectedProvider = provider;\n    } else if (isString(provider)) {\n      this._providerUrl = new URL(provider);\n      this._providerUrl.hash = new URLSearchParams({\n        origin: window.location.origin,\n        network: this._network\n      }).toString();\n    } else {\n      throw new Error('provider parameter must be an injected provider or a URL string.');\n    }\n  }\n  handleConnect() {\n    var _a;\n    if (!this._handlerAdded) {\n      this._handlerAdded = true;\n      window.addEventListener('message', this.handleMessage);\n      window.addEventListener('beforeunload', this._beforeUnload);\n    }\n    if (this._injectedProvider) {\n      return new Promise(resolve => {\n        void this.sendRequest('connect', {});\n        resolve();\n      });\n    } else {\n      window.name = 'parent';\n      this._popup = window.open((_a = this._providerUrl) === null || _a === void 0 ? void 0 : _a.toString(), '_blank', 'location,resizable,width=460,height=675');\n      return new Promise(resolve => {\n        this.once('connect', resolve);\n      });\n    }\n  }\n  handleDisconnect() {\n    if (this._handlerAdded) {\n      this._handlerAdded = false;\n      window.removeEventListener('message', this.handleMessage);\n      window.removeEventListener('beforeunload', this._beforeUnload);\n    }\n    if (this._publicKey) {\n      this._publicKey = null;\n      this.emit('disconnect');\n    }\n    this._responsePromises.forEach((_ref, id) => {\n      let [, reject] = _ref;\n      this._responsePromises.delete(id);\n      reject(new Error('Wallet disconnected'));\n    });\n  }\n  sendRequest(method, params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (method !== 'connect' && !this.connected) {\n        throw new Error('Wallet not connected');\n      }\n      const requestId = this._nextRequestId;\n      ++this._nextRequestId;\n      return new Promise((resolve, reject) => {\n        var _a, _b, _c, _d;\n        this._responsePromises.set(requestId, [resolve, reject]);\n        if (this._injectedProvider) {\n          this._injectedProvider.postMessage({\n            jsonrpc: '2.0',\n            id: requestId,\n            method,\n            params: Object.assign({\n              network: this._network\n            }, params)\n          });\n        } else {\n          (_a = this._popup) === null || _a === void 0 ? void 0 : _a.postMessage({\n            jsonrpc: '2.0',\n            id: requestId,\n            method,\n            params\n          }, (_c = (_b = this._providerUrl) === null || _b === void 0 ? void 0 : _b.origin) !== null && _c !== void 0 ? _c : '');\n          if (!this.autoApprove) {\n            (_d = this._popup) === null || _d === void 0 ? void 0 : _d.focus();\n          }\n        }\n      });\n    });\n  }\n  get publicKey() {\n    return this._publicKey;\n  }\n  get connected() {\n    return this._publicKey !== null;\n  }\n  get autoApprove() {\n    return this._autoApprove;\n  }\n  connect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this._popup) {\n        this._popup.close();\n      }\n      yield this.handleConnect();\n    });\n  }\n  disconnect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this._injectedProvider) {\n        yield this.sendRequest('disconnect', {});\n      }\n      if (this._popup) {\n        this._popup.close();\n      }\n      this.handleDisconnect();\n    });\n  }\n  sign(data, display) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!(data instanceof Uint8Array)) {\n        throw new Error('Data must be an instance of Uint8Array');\n      }\n      const response = yield this.sendRequest('sign', {\n        data,\n        display\n      });\n      const signature = bs58.decode(response.signature);\n      const publicKey = new PublicKey(response.publicKey);\n      return {\n        signature,\n        publicKey\n      };\n    });\n  }\n  signTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const response = yield this.sendRequest('signTransaction', {\n        message: bs58.encode(transaction.serializeMessage())\n      });\n      const signature = bs58.decode(response.signature);\n      const publicKey = new PublicKey(response.publicKey);\n      transaction.addSignature(publicKey, signature);\n      return transaction;\n    });\n  }\n  signAllTransactions(transactions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const response = yield this.sendRequest('signAllTransactions', {\n        messages: transactions.map(tx => bs58.encode(tx.serializeMessage()))\n      });\n      const signatures = response.signatures.map(s => bs58.decode(s));\n      const publicKey = new PublicKey(response.publicKey);\n      transactions = transactions.map((tx, idx) => {\n        tx.addSignature(publicKey, signatures[idx]);\n        return tx;\n      });\n      return transactions;\n    });\n  }\n  diffieHellman(publicKey) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!(publicKey instanceof Uint8Array)) {\n        throw new Error('Data must be an instance of Uint8Array');\n      }\n      const response = yield this.sendRequest('diffieHellman', {\n        publicKey\n      });\n      return response;\n    });\n  }\n}\nfunction isString(a) {\n  return typeof a === 'string';\n}\nfunction isInjectedProvider(a) {\n  return isObject(a) && 'postMessage' in a && typeof a.postMessage === 'function';\n}\nfunction isObject(a) {\n  return typeof a === 'object' && a !== null;\n}","map":{"version":3,"names":["EventEmitter","PublicKey","bs58","Wallet","constructor","provider","_network","_publicKey","_popup","_handlerAdded","_nextRequestId","_autoApprove","_responsePromises","Map","handleMessage","e","_injectedProvider","source","window","origin","_a","_providerUrl","data","method","newPublicKey","params","publicKey","equals","handleDisconnect","autoApprove","emit","result","error","promises","get","id","resolve","reject","Error","_beforeUnload","disconnect","isInjectedProvider","isString","URL","hash","URLSearchParams","location","network","toString","handleConnect","addEventListener","Promise","sendRequest","name","open","once","removeEventListener","forEach","_ref","delete","connected","requestId","set","postMessage","jsonrpc","Object","assign","_c","_b","_d","focus","connect","close","sign","display","Uint8Array","response","signature","decode","signTransaction","transaction","message","encode","serializeMessage","addSignature","signAllTransactions","transactions","messages","map","tx","signatures","s","idx","diffieHellman","a","isObject"],"sources":["C:\\Users\\Administrator\\solana-wallet-app\\node_modules\\@project-serum\\sol-wallet-adapter\\src\\index.ts"],"sourcesContent":["import EventEmitter from 'eventemitter3';\nimport { PublicKey, Transaction } from '@solana/web3.js';\nimport bs58 from 'bs58';\n\ntype InjectedProvider = { postMessage: (params: unknown) => void };\n\nexport default class Wallet extends EventEmitter {\n  private _providerUrl: URL | undefined;\n  private _injectedProvider?: InjectedProvider;\n  private _publicKey: PublicKey | null = null;\n  private _popup: Window | null = null;\n  private _handlerAdded = false;\n  private _nextRequestId = 1;\n  private _autoApprove = false;\n  private _responsePromises: Map<\n    number,\n    [(value: string) => void, (reason: Error) => void]\n  > = new Map();\n\n  constructor(provider: unknown, private _network: string) {\n    super();\n    if (isInjectedProvider(provider)) {\n      this._injectedProvider = provider;\n    } else if (isString(provider)) {\n      this._providerUrl = new URL(provider);\n      this._providerUrl.hash = new URLSearchParams({\n        origin: window.location.origin,\n        network: this._network,\n      }).toString();\n    } else {\n      throw new Error(\n        'provider parameter must be an injected provider or a URL string.',\n      );\n    }\n  }\n\n  handleMessage = (\n    e: MessageEvent<{\n      id: number;\n      method: string;\n      params: {\n        autoApprove: boolean;\n        publicKey: string;\n      };\n      result?: string;\n      error?: string;\n    }>,\n  ): void => {\n    if (\n      (this._injectedProvider && e.source === window) ||\n      (e.origin === this._providerUrl?.origin && e.source === this._popup)\n    ) {\n      if (e.data.method === 'connected') {\n        const newPublicKey = new PublicKey(e.data.params.publicKey);\n        if (!this._publicKey || !this._publicKey.equals(newPublicKey)) {\n          if (this._publicKey && !this._publicKey.equals(newPublicKey)) {\n            this.handleDisconnect();\n          }\n          this._publicKey = newPublicKey;\n          this._autoApprove = !!e.data.params.autoApprove;\n          this.emit('connect', this._publicKey);\n        }\n      } else if (e.data.method === 'disconnected') {\n        this.handleDisconnect();\n      } else if (e.data.result || e.data.error) {\n        const promises = this._responsePromises.get(e.data.id);\n        if (promises) {\n          const [resolve, reject] = promises;\n          if (e.data.result) {\n            resolve(e.data.result);\n          } else {\n            reject(new Error(e.data.error));\n          }\n        }\n      }\n    }\n  };\n\n  private handleConnect() {\n    if (!this._handlerAdded) {\n      this._handlerAdded = true;\n      window.addEventListener('message', this.handleMessage);\n      window.addEventListener('beforeunload', this._beforeUnload);\n    }\n    if (this._injectedProvider) {\n      return new Promise<void>((resolve) => {\n        void this.sendRequest('connect', {});\n        resolve();\n      });\n    } else {\n      window.name = 'parent';\n      this._popup = window.open(\n        this._providerUrl?.toString(),\n        '_blank',\n        'location,resizable,width=460,height=675',\n      );\n      return new Promise((resolve) => {\n        this.once('connect', resolve);\n      });\n    }\n  }\n\n  private handleDisconnect() {\n    if (this._handlerAdded) {\n      this._handlerAdded = false;\n      window.removeEventListener('message', this.handleMessage);\n      window.removeEventListener('beforeunload', this._beforeUnload);\n    }\n    if (this._publicKey) {\n      this._publicKey = null;\n      this.emit('disconnect');\n    }\n    this._responsePromises.forEach(([, reject], id) => {\n      this._responsePromises.delete(id);\n      reject(new Error('Wallet disconnected'));\n    });\n  }\n\n  private async sendRequest(method: string, params: Record<string, unknown>) {\n    if (method !== 'connect' && !this.connected) {\n      throw new Error('Wallet not connected');\n    }\n    const requestId = this._nextRequestId;\n    ++this._nextRequestId;\n    return new Promise((resolve, reject) => {\n      this._responsePromises.set(requestId, [resolve, reject]);\n      if (this._injectedProvider) {\n        this._injectedProvider.postMessage({\n          jsonrpc: '2.0',\n          id: requestId,\n          method,\n          params: {\n            network: this._network,\n            ...params,\n          },\n        });\n      } else {\n        this._popup?.postMessage(\n          {\n            jsonrpc: '2.0',\n            id: requestId,\n            method,\n            params,\n          },\n          this._providerUrl?.origin ?? '',\n        );\n\n        if (!this.autoApprove) {\n          this._popup?.focus();\n        }\n      }\n    });\n  }\n\n  get publicKey(): PublicKey | null {\n    return this._publicKey;\n  }\n\n  get connected(): boolean {\n    return this._publicKey !== null;\n  }\n\n  get autoApprove(): boolean {\n    return this._autoApprove;\n  }\n\n  async connect(): Promise<void> {\n    if (this._popup) {\n      this._popup.close();\n    }\n    await this.handleConnect();\n  }\n\n  async disconnect(): Promise<void> {\n    if (this._injectedProvider) {\n      await this.sendRequest('disconnect', {});\n    }\n    if (this._popup) {\n      this._popup.close();\n    }\n    this.handleDisconnect();\n  }\n\n  private _beforeUnload = (): void => {\n    void this.disconnect();\n  };\n\n  async sign(\n    data: Uint8Array,\n    display: unknown,\n  ): Promise<{\n    signature: Buffer;\n    publicKey: PublicKey;\n  }> {\n    if (!(data instanceof Uint8Array)) {\n      throw new Error('Data must be an instance of Uint8Array');\n    }\n\n    const response = (await this.sendRequest('sign', {\n      data,\n      display,\n    })) as { publicKey: string; signature: string };\n    const signature = bs58.decode(response.signature);\n    const publicKey = new PublicKey(response.publicKey);\n    return {\n      signature,\n      publicKey,\n    };\n  }\n\n  async signTransaction(transaction: Transaction): Promise<Transaction> {\n    const response = (await this.sendRequest('signTransaction', {\n      message: bs58.encode(transaction.serializeMessage()),\n    })) as { publicKey: string; signature: string };\n    const signature = bs58.decode(response.signature);\n    const publicKey = new PublicKey(response.publicKey);\n    transaction.addSignature(publicKey, signature);\n    return transaction;\n  }\n\n  async signAllTransactions(\n    transactions: Transaction[],\n  ): Promise<Transaction[]> {\n    const response = (await this.sendRequest('signAllTransactions', {\n      messages: transactions.map((tx) => bs58.encode(tx.serializeMessage())),\n    })) as { publicKey: string; signatures: string[] };\n    const signatures = response.signatures.map((s) => bs58.decode(s));\n    const publicKey = new PublicKey(response.publicKey);\n    transactions = transactions.map((tx, idx) => {\n      tx.addSignature(publicKey, signatures[idx]);\n      return tx;\n    });\n    return transactions;\n  }\n\n  async diffieHellman(\n    publicKey: Uint8Array,\n  ): Promise<{ publicKey: Uint8Array; secretKey: Uint8Array }> {\n    if (!(publicKey instanceof Uint8Array)) {\n      throw new Error('Data must be an instance of Uint8Array');\n    }\n    const response = (await this.sendRequest('diffieHellman', {\n      publicKey,\n    })) as {\n      publicKey: Uint8Array;\n      secretKey: Uint8Array;\n    };\n    return response;\n  }\n}\n\nfunction isString(a: unknown): a is string {\n  return typeof a === 'string';\n}\n\nfunction isInjectedProvider(a: unknown): a is InjectedProvider {\n  return (\n    isObject(a) && 'postMessage' in a && typeof a.postMessage === 'function'\n  );\n}\n\nfunction isObject(a: unknown): a is Record<string, unknown> {\n  return typeof a === 'object' && a !== null;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}