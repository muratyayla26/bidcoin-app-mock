{"ast":null,"code":"\"use strict\";\n\n/*--------------------------------------------------------------------------\n\n@sinclair/typebox/value\n\nThe MIT License (MIT)\n\nCopyright (c) 2017-2023 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IsValueType = exports.IsSymbol = exports.IsFunction = exports.IsString = exports.IsBigInt = exports.IsInteger = exports.IsNumber = exports.IsBoolean = exports.IsNull = exports.IsUndefined = exports.IsArray = exports.IsObject = exports.IsPlainObject = exports.HasPropertyKey = exports.IsDate = exports.IsUint8Array = exports.IsPromise = exports.IsTypedArray = exports.IsIterator = exports.IsAsyncIterator = void 0;\n// --------------------------------------------------------------------------\n// Iterators\n// --------------------------------------------------------------------------\n/** Returns true if this value is an async iterator */\nfunction IsAsyncIterator(value) {\n  return IsObject(value) && Symbol.asyncIterator in value;\n}\nexports.IsAsyncIterator = IsAsyncIterator;\n/** Returns true if this value is an iterator */\nfunction IsIterator(value) {\n  return IsObject(value) && Symbol.iterator in value;\n}\nexports.IsIterator = IsIterator;\n// --------------------------------------------------------------------------\n// Nominal\n// --------------------------------------------------------------------------\n/** Returns true if this value is a typed array */\nfunction IsTypedArray(value) {\n  return ArrayBuffer.isView(value);\n}\nexports.IsTypedArray = IsTypedArray;\n/** Returns true if this value is a Promise */\nfunction IsPromise(value) {\n  return value instanceof Promise;\n}\nexports.IsPromise = IsPromise;\n/** Returns true if the value is a Uint8Array */\nfunction IsUint8Array(value) {\n  return value instanceof Uint8Array;\n}\nexports.IsUint8Array = IsUint8Array;\n/** Returns true if this value is a Date */\nfunction IsDate(value) {\n  return value instanceof Date && Number.isFinite(value.getTime());\n}\nexports.IsDate = IsDate;\n// --------------------------------------------------------------------------\n// Standard\n// --------------------------------------------------------------------------\n/** Returns true if this value has this property key */\nfunction HasPropertyKey(value, key) {\n  return key in value;\n}\nexports.HasPropertyKey = HasPropertyKey;\n/** Returns true if this object is not an instance of any other type */\nfunction IsPlainObject(value) {\n  return IsObject(value) && IsFunction(value.constructor) && value.constructor.name === 'Object';\n}\nexports.IsPlainObject = IsPlainObject;\n/** Returns true of this value is an object type */\nfunction IsObject(value) {\n  return value !== null && typeof value === 'object';\n}\nexports.IsObject = IsObject;\n/** Returns true if this value is an array, but not a typed array */\nfunction IsArray(value) {\n  return Array.isArray(value) && !ArrayBuffer.isView(value);\n}\nexports.IsArray = IsArray;\n/** Returns true if this value is an undefined */\nfunction IsUndefined(value) {\n  return value === undefined;\n}\nexports.IsUndefined = IsUndefined;\n/** Returns true if this value is an null */\nfunction IsNull(value) {\n  return value === null;\n}\nexports.IsNull = IsNull;\n/** Returns true if this value is an boolean */\nfunction IsBoolean(value) {\n  return typeof value === 'boolean';\n}\nexports.IsBoolean = IsBoolean;\n/** Returns true if this value is an number */\nfunction IsNumber(value) {\n  return typeof value === 'number';\n}\nexports.IsNumber = IsNumber;\n/** Returns true if this value is an integer */\nfunction IsInteger(value) {\n  return IsNumber(value) && Number.isInteger(value);\n}\nexports.IsInteger = IsInteger;\n/** Returns true if this value is bigint */\nfunction IsBigInt(value) {\n  return typeof value === 'bigint';\n}\nexports.IsBigInt = IsBigInt;\n/** Returns true if this value is string */\nfunction IsString(value) {\n  return typeof value === 'string';\n}\nexports.IsString = IsString;\n/** Returns true if this value is a function */\nfunction IsFunction(value) {\n  return typeof value === 'function';\n}\nexports.IsFunction = IsFunction;\n/** Returns true if this value is a symbol */\nfunction IsSymbol(value) {\n  return typeof value === 'symbol';\n}\nexports.IsSymbol = IsSymbol;\n/** Returns true if this value is a value type such as number, string, boolean */\nfunction IsValueType(value) {\n  // prettier-ignore\n  return IsBigInt(value) || IsBoolean(value) || IsNull(value) || IsNumber(value) || IsString(value) || IsSymbol(value) || IsUndefined(value);\n}\nexports.IsValueType = IsValueType;","map":{"version":3,"names":["Object","defineProperty","exports","value","IsValueType","IsSymbol","IsFunction","IsString","IsBigInt","IsInteger","IsNumber","IsBoolean","IsNull","IsUndefined","IsArray","IsObject","IsPlainObject","HasPropertyKey","IsDate","IsUint8Array","IsPromise","IsTypedArray","IsIterator","IsAsyncIterator","Symbol","asyncIterator","iterator","ArrayBuffer","isView","Promise","Uint8Array","Date","Number","isFinite","getTime","key","constructor","name","Array","isArray","undefined","isInteger"],"sources":["C:/Users/Administrator/solana-wallet-app/node_modules/@trezor/schema-utils/node_modules/@sinclair/typebox/value/guard.js"],"sourcesContent":["\"use strict\";\n/*--------------------------------------------------------------------------\n\n@sinclair/typebox/value\n\nThe MIT License (MIT)\n\nCopyright (c) 2017-2023 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IsValueType = exports.IsSymbol = exports.IsFunction = exports.IsString = exports.IsBigInt = exports.IsInteger = exports.IsNumber = exports.IsBoolean = exports.IsNull = exports.IsUndefined = exports.IsArray = exports.IsObject = exports.IsPlainObject = exports.HasPropertyKey = exports.IsDate = exports.IsUint8Array = exports.IsPromise = exports.IsTypedArray = exports.IsIterator = exports.IsAsyncIterator = void 0;\n// --------------------------------------------------------------------------\n// Iterators\n// --------------------------------------------------------------------------\n/** Returns true if this value is an async iterator */\nfunction IsAsyncIterator(value) {\n    return IsObject(value) && Symbol.asyncIterator in value;\n}\nexports.IsAsyncIterator = IsAsyncIterator;\n/** Returns true if this value is an iterator */\nfunction IsIterator(value) {\n    return IsObject(value) && Symbol.iterator in value;\n}\nexports.IsIterator = IsIterator;\n// --------------------------------------------------------------------------\n// Nominal\n// --------------------------------------------------------------------------\n/** Returns true if this value is a typed array */\nfunction IsTypedArray(value) {\n    return ArrayBuffer.isView(value);\n}\nexports.IsTypedArray = IsTypedArray;\n/** Returns true if this value is a Promise */\nfunction IsPromise(value) {\n    return value instanceof Promise;\n}\nexports.IsPromise = IsPromise;\n/** Returns true if the value is a Uint8Array */\nfunction IsUint8Array(value) {\n    return value instanceof Uint8Array;\n}\nexports.IsUint8Array = IsUint8Array;\n/** Returns true if this value is a Date */\nfunction IsDate(value) {\n    return value instanceof Date && Number.isFinite(value.getTime());\n}\nexports.IsDate = IsDate;\n// --------------------------------------------------------------------------\n// Standard\n// --------------------------------------------------------------------------\n/** Returns true if this value has this property key */\nfunction HasPropertyKey(value, key) {\n    return key in value;\n}\nexports.HasPropertyKey = HasPropertyKey;\n/** Returns true if this object is not an instance of any other type */\nfunction IsPlainObject(value) {\n    return IsObject(value) && IsFunction(value.constructor) && value.constructor.name === 'Object';\n}\nexports.IsPlainObject = IsPlainObject;\n/** Returns true of this value is an object type */\nfunction IsObject(value) {\n    return value !== null && typeof value === 'object';\n}\nexports.IsObject = IsObject;\n/** Returns true if this value is an array, but not a typed array */\nfunction IsArray(value) {\n    return Array.isArray(value) && !ArrayBuffer.isView(value);\n}\nexports.IsArray = IsArray;\n/** Returns true if this value is an undefined */\nfunction IsUndefined(value) {\n    return value === undefined;\n}\nexports.IsUndefined = IsUndefined;\n/** Returns true if this value is an null */\nfunction IsNull(value) {\n    return value === null;\n}\nexports.IsNull = IsNull;\n/** Returns true if this value is an boolean */\nfunction IsBoolean(value) {\n    return typeof value === 'boolean';\n}\nexports.IsBoolean = IsBoolean;\n/** Returns true if this value is an number */\nfunction IsNumber(value) {\n    return typeof value === 'number';\n}\nexports.IsNumber = IsNumber;\n/** Returns true if this value is an integer */\nfunction IsInteger(value) {\n    return IsNumber(value) && Number.isInteger(value);\n}\nexports.IsInteger = IsInteger;\n/** Returns true if this value is bigint */\nfunction IsBigInt(value) {\n    return typeof value === 'bigint';\n}\nexports.IsBigInt = IsBigInt;\n/** Returns true if this value is string */\nfunction IsString(value) {\n    return typeof value === 'string';\n}\nexports.IsString = IsString;\n/** Returns true if this value is a function */\nfunction IsFunction(value) {\n    return typeof value === 'function';\n}\nexports.IsFunction = IsFunction;\n/** Returns true if this value is a symbol */\nfunction IsSymbol(value) {\n    return typeof value === 'symbol';\n}\nexports.IsSymbol = IsSymbol;\n/** Returns true if this value is a value type such as number, string, boolean */\nfunction IsValueType(value) {\n    // prettier-ignore\n    return (IsBigInt(value) ||\n        IsBoolean(value) ||\n        IsNull(value) ||\n        IsNumber(value) ||\n        IsString(value) ||\n        IsSymbol(value) ||\n        IsUndefined(value));\n}\nexports.IsValueType = IsValueType;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,WAAW,GAAGF,OAAO,CAACG,QAAQ,GAAGH,OAAO,CAACI,UAAU,GAAGJ,OAAO,CAACK,QAAQ,GAAGL,OAAO,CAACM,QAAQ,GAAGN,OAAO,CAACO,SAAS,GAAGP,OAAO,CAACQ,QAAQ,GAAGR,OAAO,CAACS,SAAS,GAAGT,OAAO,CAACU,MAAM,GAAGV,OAAO,CAACW,WAAW,GAAGX,OAAO,CAACY,OAAO,GAAGZ,OAAO,CAACa,QAAQ,GAAGb,OAAO,CAACc,aAAa,GAAGd,OAAO,CAACe,cAAc,GAAGf,OAAO,CAACgB,MAAM,GAAGhB,OAAO,CAACiB,YAAY,GAAGjB,OAAO,CAACkB,SAAS,GAAGlB,OAAO,CAACmB,YAAY,GAAGnB,OAAO,CAACoB,UAAU,GAAGpB,OAAO,CAACqB,eAAe,GAAG,KAAK,CAAC;AACpa;AACA;AACA;AACA;AACA,SAASA,eAAeA,CAACpB,KAAK,EAAE;EAC5B,OAAOY,QAAQ,CAACZ,KAAK,CAAC,IAAIqB,MAAM,CAACC,aAAa,IAAItB,KAAK;AAC3D;AACAD,OAAO,CAACqB,eAAe,GAAGA,eAAe;AACzC;AACA,SAASD,UAAUA,CAACnB,KAAK,EAAE;EACvB,OAAOY,QAAQ,CAACZ,KAAK,CAAC,IAAIqB,MAAM,CAACE,QAAQ,IAAIvB,KAAK;AACtD;AACAD,OAAO,CAACoB,UAAU,GAAGA,UAAU;AAC/B;AACA;AACA;AACA;AACA,SAASD,YAAYA,CAAClB,KAAK,EAAE;EACzB,OAAOwB,WAAW,CAACC,MAAM,CAACzB,KAAK,CAAC;AACpC;AACAD,OAAO,CAACmB,YAAY,GAAGA,YAAY;AACnC;AACA,SAASD,SAASA,CAACjB,KAAK,EAAE;EACtB,OAAOA,KAAK,YAAY0B,OAAO;AACnC;AACA3B,OAAO,CAACkB,SAAS,GAAGA,SAAS;AAC7B;AACA,SAASD,YAAYA,CAAChB,KAAK,EAAE;EACzB,OAAOA,KAAK,YAAY2B,UAAU;AACtC;AACA5B,OAAO,CAACiB,YAAY,GAAGA,YAAY;AACnC;AACA,SAASD,MAAMA,CAACf,KAAK,EAAE;EACnB,OAAOA,KAAK,YAAY4B,IAAI,IAAIC,MAAM,CAACC,QAAQ,CAAC9B,KAAK,CAAC+B,OAAO,CAAC,CAAC,CAAC;AACpE;AACAhC,OAAO,CAACgB,MAAM,GAAGA,MAAM;AACvB;AACA;AACA;AACA;AACA,SAASD,cAAcA,CAACd,KAAK,EAAEgC,GAAG,EAAE;EAChC,OAAOA,GAAG,IAAIhC,KAAK;AACvB;AACAD,OAAO,CAACe,cAAc,GAAGA,cAAc;AACvC;AACA,SAASD,aAAaA,CAACb,KAAK,EAAE;EAC1B,OAAOY,QAAQ,CAACZ,KAAK,CAAC,IAAIG,UAAU,CAACH,KAAK,CAACiC,WAAW,CAAC,IAAIjC,KAAK,CAACiC,WAAW,CAACC,IAAI,KAAK,QAAQ;AAClG;AACAnC,OAAO,CAACc,aAAa,GAAGA,aAAa;AACrC;AACA,SAASD,QAAQA,CAACZ,KAAK,EAAE;EACrB,OAAOA,KAAK,KAAK,IAAI,IAAI,OAAOA,KAAK,KAAK,QAAQ;AACtD;AACAD,OAAO,CAACa,QAAQ,GAAGA,QAAQ;AAC3B;AACA,SAASD,OAAOA,CAACX,KAAK,EAAE;EACpB,OAAOmC,KAAK,CAACC,OAAO,CAACpC,KAAK,CAAC,IAAI,CAACwB,WAAW,CAACC,MAAM,CAACzB,KAAK,CAAC;AAC7D;AACAD,OAAO,CAACY,OAAO,GAAGA,OAAO;AACzB;AACA,SAASD,WAAWA,CAACV,KAAK,EAAE;EACxB,OAAOA,KAAK,KAAKqC,SAAS;AAC9B;AACAtC,OAAO,CAACW,WAAW,GAAGA,WAAW;AACjC;AACA,SAASD,MAAMA,CAACT,KAAK,EAAE;EACnB,OAAOA,KAAK,KAAK,IAAI;AACzB;AACAD,OAAO,CAACU,MAAM,GAAGA,MAAM;AACvB;AACA,SAASD,SAASA,CAACR,KAAK,EAAE;EACtB,OAAO,OAAOA,KAAK,KAAK,SAAS;AACrC;AACAD,OAAO,CAACS,SAAS,GAAGA,SAAS;AAC7B;AACA,SAASD,QAAQA,CAACP,KAAK,EAAE;EACrB,OAAO,OAAOA,KAAK,KAAK,QAAQ;AACpC;AACAD,OAAO,CAACQ,QAAQ,GAAGA,QAAQ;AAC3B;AACA,SAASD,SAASA,CAACN,KAAK,EAAE;EACtB,OAAOO,QAAQ,CAACP,KAAK,CAAC,IAAI6B,MAAM,CAACS,SAAS,CAACtC,KAAK,CAAC;AACrD;AACAD,OAAO,CAACO,SAAS,GAAGA,SAAS;AAC7B;AACA,SAASD,QAAQA,CAACL,KAAK,EAAE;EACrB,OAAO,OAAOA,KAAK,KAAK,QAAQ;AACpC;AACAD,OAAO,CAACM,QAAQ,GAAGA,QAAQ;AAC3B;AACA,SAASD,QAAQA,CAACJ,KAAK,EAAE;EACrB,OAAO,OAAOA,KAAK,KAAK,QAAQ;AACpC;AACAD,OAAO,CAACK,QAAQ,GAAGA,QAAQ;AAC3B;AACA,SAASD,UAAUA,CAACH,KAAK,EAAE;EACvB,OAAO,OAAOA,KAAK,KAAK,UAAU;AACtC;AACAD,OAAO,CAACI,UAAU,GAAGA,UAAU;AAC/B;AACA,SAASD,QAAQA,CAACF,KAAK,EAAE;EACrB,OAAO,OAAOA,KAAK,KAAK,QAAQ;AACpC;AACAD,OAAO,CAACG,QAAQ,GAAGA,QAAQ;AAC3B;AACA,SAASD,WAAWA,CAACD,KAAK,EAAE;EACxB;EACA,OAAQK,QAAQ,CAACL,KAAK,CAAC,IACnBQ,SAAS,CAACR,KAAK,CAAC,IAChBS,MAAM,CAACT,KAAK,CAAC,IACbO,QAAQ,CAACP,KAAK,CAAC,IACfI,QAAQ,CAACJ,KAAK,CAAC,IACfE,QAAQ,CAACF,KAAK,CAAC,IACfU,WAAW,CAACV,KAAK,CAAC;AAC1B;AACAD,OAAO,CAACE,WAAW,GAAGA,WAAW","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}