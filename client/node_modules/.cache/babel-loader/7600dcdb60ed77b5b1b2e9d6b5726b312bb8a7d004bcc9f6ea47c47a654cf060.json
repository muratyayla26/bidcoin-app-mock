{"ast":null,"code":"/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\nclass StructError extends TypeError {\n  constructor(failure, failures) {\n    let cached;\n    const {\n      message,\n      explanation,\n      ...rest\n    } = failure;\n    const {\n      path\n    } = failure;\n    const msg = path.length === 0 ? message : `At path: ${path.join('.')} -- ${message}`;\n    super(explanation ?? msg);\n    if (explanation != null) this.cause = msg;\n    Object.assign(this, rest);\n    this.name = this.constructor.name;\n    this.failures = () => {\n      return cached ?? (cached = [failure, ...failures()]);\n    };\n  }\n}\n\n/**\n * Check if a value is an iterator.\n */\nfunction isIterable(x) {\n  return isObject(x) && typeof x[Symbol.iterator] === 'function';\n}\n/**\n * Check if a value is a plain object.\n */\nfunction isObject(x) {\n  return typeof x === 'object' && x != null;\n}\n/**\n * Check if a value is a non-array object.\n */\nfunction isNonArrayObject(x) {\n  return isObject(x) && !Array.isArray(x);\n}\n/**\n * Check if a value is a plain object.\n */\nfunction isPlainObject(x) {\n  if (Object.prototype.toString.call(x) !== '[object Object]') {\n    return false;\n  }\n  const prototype = Object.getPrototypeOf(x);\n  return prototype === null || prototype === Object.prototype;\n}\n/**\n * Return a value as a printable string.\n */\nfunction print(value) {\n  if (typeof value === 'symbol') {\n    return value.toString();\n  }\n  return typeof value === 'string' ? JSON.stringify(value) : `${value}`;\n}\n/**\n * Shifts (removes and returns) the first value from the `input` iterator.\n * Like `Array.prototype.shift()` but for an `Iterator`.\n */\nfunction shiftIterator(input) {\n  const {\n    done,\n    value\n  } = input.next();\n  return done ? undefined : value;\n}\n/**\n * Convert a single validation result to a failure.\n */\nfunction toFailure(result, context, struct, value) {\n  if (result === true) {\n    return;\n  } else if (result === false) {\n    result = {};\n  } else if (typeof result === 'string') {\n    result = {\n      message: result\n    };\n  }\n  const {\n    path,\n    branch\n  } = context;\n  const {\n    type\n  } = struct;\n  const {\n    refinement,\n    message = `Expected a value of type \\`${type}\\`${refinement ? ` with refinement \\`${refinement}\\`` : ''}, but received: \\`${print(value)}\\``\n  } = result;\n  return {\n    value,\n    type,\n    refinement,\n    key: path[path.length - 1],\n    path,\n    branch,\n    ...result,\n    message\n  };\n}\n/**\n * Convert a validation result to an iterable of failures.\n */\nfunction* toFailures(result, context, struct, value) {\n  if (!isIterable(result)) {\n    result = [result];\n  }\n  for (const r of result) {\n    const failure = toFailure(r, context, struct, value);\n    if (failure) {\n      yield failure;\n    }\n  }\n}\n/**\n * Check a value against a struct, traversing deeply into nested values, and\n * returning an iterator of failures or success.\n */\nfunction run(value, struct) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return function* () {\n    const {\n      path = [],\n      branch = [value],\n      coerce = false,\n      mask = false\n    } = options;\n    const ctx = {\n      path,\n      branch,\n      mask\n    };\n    if (coerce) {\n      value = struct.coercer(value, ctx);\n    }\n    let status = 'valid';\n    for (const failure of struct.validator(value, ctx)) {\n      failure.explanation = options.message;\n      status = 'not_valid';\n      yield [failure, undefined];\n    }\n    for (let [k, v, s] of struct.entries(value, ctx)) {\n      const ts = run(v, s, {\n        path: k === undefined ? path : [...path, k],\n        branch: k === undefined ? branch : [...branch, v],\n        coerce,\n        mask,\n        message: options.message\n      });\n      for (const t of ts) {\n        if (t[0]) {\n          status = t[0].refinement != null ? 'not_refined' : 'not_valid';\n          yield [t[0], undefined];\n        } else if (coerce) {\n          v = t[1];\n          if (k === undefined) {\n            value = v;\n          } else if (value instanceof Map) {\n            value.set(k, v);\n          } else if (value instanceof Set) {\n            value.add(v);\n          } else if (isObject(value)) {\n            if (v !== undefined || k in value) value[k] = v;\n          }\n        }\n      }\n    }\n    if (status !== 'not_valid') {\n      for (const failure of struct.refiner(value, ctx)) {\n        failure.explanation = options.message;\n        status = 'not_refined';\n        yield [failure, undefined];\n      }\n    }\n    if (status === 'valid') {\n      yield [undefined, value];\n    }\n  }();\n}\n\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\nclass Struct {\n  constructor(props) {\n    const {\n      type,\n      schema,\n      validator,\n      refiner,\n      coercer = value => value,\n      entries = function* () {}\n    } = props;\n    this.type = type;\n    this.schema = schema;\n    this.entries = entries;\n    this.coercer = coercer;\n    if (validator) {\n      this.validator = (value, context) => {\n        const result = validator(value, context);\n        return toFailures(result, context, this, value);\n      };\n    } else {\n      this.validator = () => [];\n    }\n    if (refiner) {\n      this.refiner = (value, context) => {\n        const result = refiner(value, context);\n        return toFailures(result, context, this, value);\n      };\n    } else {\n      this.refiner = () => [];\n    }\n  }\n  /**\n   * Assert that a value passes the struct's validation, throwing if it doesn't.\n   */\n  assert(value, message) {\n    return assert(value, this, message);\n  }\n  /**\n   * Create a value with the struct's coercion logic, then validate it.\n   */\n  create(value, message) {\n    return create(value, this, message);\n  }\n  /**\n   * Check if a value passes the struct's validation.\n   */\n  is(value) {\n    return is(value, this);\n  }\n  /**\n   * Mask a value, coercing and validating it, but returning only the subset of\n   * properties defined by the struct's schema. Masking applies recursively to\n   * props of `object` structs only.\n   */\n  mask(value, message) {\n    return mask(value, this, message);\n  }\n  /**\n   * Validate a value with the struct's validation logic, returning a tuple\n   * representing the result.\n   *\n   * You may optionally pass `true` for the `coerce` argument to coerce\n   * the value before attempting to validate it. If you do, the result will\n   * contain the coerced result when successful. Also, `mask` will turn on\n   * masking of the unknown `object` props recursively if passed.\n   */\n  validate(value) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return validate(value, this, options);\n  }\n}\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\nfunction assert(value, struct, message) {\n  const result = validate(value, struct, {\n    message\n  });\n  if (result[0]) {\n    throw result[0];\n  }\n}\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\nfunction create(value, struct, message) {\n  const result = validate(value, struct, {\n    coerce: true,\n    message\n  });\n  if (result[0]) {\n    throw result[0];\n  } else {\n    return result[1];\n  }\n}\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\nfunction mask(value, struct, message) {\n  const result = validate(value, struct, {\n    coerce: true,\n    mask: true,\n    message\n  });\n  if (result[0]) {\n    throw result[0];\n  } else {\n    return result[1];\n  }\n}\n/**\n * Check if a value passes a struct.\n */\nfunction is(value, struct) {\n  const result = validate(value, struct);\n  return !result[0];\n}\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\nfunction validate(value, struct) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const tuples = run(value, struct, options);\n  const tuple = shiftIterator(tuples);\n  if (tuple[0]) {\n    const error = new StructError(tuple[0], function* () {\n      for (const t of tuples) {\n        if (t[0]) {\n          yield t[0];\n        }\n      }\n    });\n    return [error, undefined];\n  } else {\n    const v = tuple[1];\n    return [undefined, v];\n  }\n}\nfunction assign() {\n  for (var _len = arguments.length, Structs = new Array(_len), _key = 0; _key < _len; _key++) {\n    Structs[_key] = arguments[_key];\n  }\n  const isType = Structs[0].type === 'type';\n  const schemas = Structs.map(s => s.schema);\n  const schema = Object.assign({}, ...schemas);\n  return isType ? type(schema) : object(schema);\n}\n/**\n * Define a new struct type with a custom validation function.\n */\nfunction define(name, validator) {\n  return new Struct({\n    type: name,\n    schema: null,\n    validator\n  });\n}\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\nfunction deprecated(struct, log) {\n  return new Struct({\n    ...struct,\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n    validator(value, ctx) {\n      if (value === undefined) {\n        return true;\n      } else {\n        log(value, ctx);\n        return struct.validator(value, ctx);\n      }\n    }\n  });\n}\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\nfunction dynamic(fn) {\n  return new Struct({\n    type: 'dynamic',\n    schema: null,\n    *entries(value, ctx) {\n      const struct = fn(value, ctx);\n      yield* struct.entries(value, ctx);\n    },\n    validator(value, ctx) {\n      const struct = fn(value, ctx);\n      return struct.validator(value, ctx);\n    },\n    coercer(value, ctx) {\n      const struct = fn(value, ctx);\n      return struct.coercer(value, ctx);\n    },\n    refiner(value, ctx) {\n      const struct = fn(value, ctx);\n      return struct.refiner(value, ctx);\n    }\n  });\n}\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\nfunction lazy(fn) {\n  let struct;\n  return new Struct({\n    type: 'lazy',\n    schema: null,\n    *entries(value, ctx) {\n      struct ?? (struct = fn());\n      yield* struct.entries(value, ctx);\n    },\n    validator(value, ctx) {\n      struct ?? (struct = fn());\n      return struct.validator(value, ctx);\n    },\n    coercer(value, ctx) {\n      struct ?? (struct = fn());\n      return struct.coercer(value, ctx);\n    },\n    refiner(value, ctx) {\n      struct ?? (struct = fn());\n      return struct.refiner(value, ctx);\n    }\n  });\n}\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\nfunction omit(struct, keys) {\n  const {\n    schema\n  } = struct;\n  const subschema = {\n    ...schema\n  };\n  for (const key of keys) {\n    delete subschema[key];\n  }\n  switch (struct.type) {\n    case 'type':\n      return type(subschema);\n    default:\n      return object(subschema);\n  }\n}\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\nfunction partial(struct) {\n  const isStruct = struct instanceof Struct;\n  const schema = isStruct ? {\n    ...struct.schema\n  } : {\n    ...struct\n  };\n  for (const key in schema) {\n    schema[key] = optional(schema[key]);\n  }\n  if (isStruct && struct.type === 'type') {\n    return type(schema);\n  }\n  return object(schema);\n}\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\nfunction pick(struct, keys) {\n  const {\n    schema\n  } = struct;\n  const subschema = {};\n  for (const key of keys) {\n    subschema[key] = schema[key];\n  }\n  switch (struct.type) {\n    case 'type':\n      return type(subschema);\n    default:\n      return object(subschema);\n  }\n}\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\nfunction struct(name, validator) {\n  console.warn('superstruct@0.11 - The `struct` helper has been renamed to `define`.');\n  return define(name, validator);\n}\n\n/**\n * Ensure that any value passes validation.\n */\nfunction any() {\n  return define('any', () => true);\n}\nfunction array(Element) {\n  return new Struct({\n    type: 'array',\n    schema: Element,\n    *entries(value) {\n      if (Element && Array.isArray(value)) {\n        for (const [i, v] of value.entries()) {\n          yield [i, v, Element];\n        }\n      }\n    },\n    coercer(value) {\n      return Array.isArray(value) ? value.slice() : value;\n    },\n    validator(value) {\n      return Array.isArray(value) || `Expected an array value, but received: ${print(value)}`;\n    }\n  });\n}\n/**\n * Ensure that a value is a bigint.\n */\nfunction bigint() {\n  return define('bigint', value => {\n    return typeof value === 'bigint';\n  });\n}\n/**\n * Ensure that a value is a boolean.\n */\nfunction boolean() {\n  return define('boolean', value => {\n    return typeof value === 'boolean';\n  });\n}\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\nfunction date() {\n  return define('date', value => {\n    return value instanceof Date && !isNaN(value.getTime()) || `Expected a valid \\`Date\\` object, but received: ${print(value)}`;\n  });\n}\nfunction enums(values) {\n  const schema = {};\n  const description = values.map(v => print(v)).join();\n  for (const key of values) {\n    schema[key] = key;\n  }\n  return new Struct({\n    type: 'enums',\n    schema,\n    validator(value) {\n      return values.includes(value) || `Expected one of \\`${description}\\`, but received: ${print(value)}`;\n    }\n  });\n}\n/**\n * Ensure that a value is a function.\n */\nfunction func() {\n  return define('func', value => {\n    return typeof value === 'function' || `Expected a function, but received: ${print(value)}`;\n  });\n}\n/**\n * Ensure that a value is an instance of a specific class.\n */\nfunction instance(Class) {\n  return define('instance', value => {\n    return value instanceof Class || `Expected a \\`${Class.name}\\` instance, but received: ${print(value)}`;\n  });\n}\n/**\n * Ensure that a value is an integer.\n */\nfunction integer() {\n  return define('integer', value => {\n    return typeof value === 'number' && !isNaN(value) && Number.isInteger(value) || `Expected an integer, but received: ${print(value)}`;\n  });\n}\n/**\n * Ensure that a value matches all of a set of types.\n */\nfunction intersection(Structs) {\n  return new Struct({\n    type: 'intersection',\n    schema: null,\n    *entries(value, ctx) {\n      for (const S of Structs) {\n        yield* S.entries(value, ctx);\n      }\n    },\n    *validator(value, ctx) {\n      for (const S of Structs) {\n        yield* S.validator(value, ctx);\n      }\n    },\n    *refiner(value, ctx) {\n      for (const S of Structs) {\n        yield* S.refiner(value, ctx);\n      }\n    }\n  });\n}\nfunction literal(constant) {\n  const description = print(constant);\n  const t = typeof constant;\n  return new Struct({\n    type: 'literal',\n    schema: t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n    validator(value) {\n      return value === constant || `Expected the literal \\`${description}\\`, but received: ${print(value)}`;\n    }\n  });\n}\nfunction map(Key, Value) {\n  return new Struct({\n    type: 'map',\n    schema: null,\n    *entries(value) {\n      if (Key && Value && value instanceof Map) {\n        for (const [k, v] of value.entries()) {\n          yield [k, k, Key];\n          yield [k, v, Value];\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Map ? new Map(value) : value;\n    },\n    validator(value) {\n      return value instanceof Map || `Expected a \\`Map\\` object, but received: ${print(value)}`;\n    }\n  });\n}\n/**\n * Ensure that no value ever passes validation.\n */\nfunction never() {\n  return define('never', () => false);\n}\n/**\n * Augment an existing struct to allow `null` values.\n */\nfunction nullable(struct) {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) => value === null || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === null || struct.refiner(value, ctx)\n  });\n}\n/**\n * Ensure that a value is a number.\n */\nfunction number() {\n  return define('number', value => {\n    return typeof value === 'number' && !isNaN(value) || `Expected a number, but received: ${print(value)}`;\n  });\n}\nfunction object(schema) {\n  const knowns = schema ? Object.keys(schema) : [];\n  const Never = never();\n  return new Struct({\n    type: 'object',\n    schema: schema ? schema : null,\n    *entries(value) {\n      if (schema && isObject(value)) {\n        const unknowns = new Set(Object.keys(value));\n        for (const key of knowns) {\n          unknowns.delete(key);\n          yield [key, value[key], schema[key]];\n        }\n        for (const key of unknowns) {\n          yield [key, value[key], Never];\n        }\n      }\n    },\n    validator(value) {\n      return isNonArrayObject(value) || `Expected an object, but received: ${print(value)}`;\n    },\n    coercer(value, ctx) {\n      if (!isNonArrayObject(value)) {\n        return value;\n      }\n      const coerced = {\n        ...value\n      };\n      // The `object` struct has special behaviour enabled by the mask flag.\n      // When masking, properties that are not in the schema are deleted from\n      // the coerced object instead of eventually failing validaiton.\n      if (ctx.mask && schema) {\n        for (const key in coerced) {\n          if (schema[key] === undefined) {\n            delete coerced[key];\n          }\n        }\n      }\n      return coerced;\n    }\n  });\n}\n/**\n * Augment a struct to allow `undefined` values.\n */\nfunction optional(struct) {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) => value === undefined || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx)\n  });\n}\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\nfunction record(Key, Value) {\n  return new Struct({\n    type: 'record',\n    schema: null,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k in value) {\n          const v = value[k];\n          yield [k, k, Key];\n          yield [k, v, Value];\n        }\n      }\n    },\n    validator(value) {\n      return isNonArrayObject(value) || `Expected an object, but received: ${print(value)}`;\n    },\n    coercer(value) {\n      return isNonArrayObject(value) ? {\n        ...value\n      } : value;\n    }\n  });\n}\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\nfunction regexp() {\n  return define('regexp', value => {\n    return value instanceof RegExp;\n  });\n}\nfunction set(Element) {\n  return new Struct({\n    type: 'set',\n    schema: null,\n    *entries(value) {\n      if (Element && value instanceof Set) {\n        for (const v of value) {\n          yield [v, v, Element];\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Set ? new Set(value) : value;\n    },\n    validator(value) {\n      return value instanceof Set || `Expected a \\`Set\\` object, but received: ${print(value)}`;\n    }\n  });\n}\n/**\n * Ensure that a value is a string.\n */\nfunction string() {\n  return define('string', value => {\n    return typeof value === 'string' || `Expected a string, but received: ${print(value)}`;\n  });\n}\n/**\n * Ensure that a value is a tuple of a specific length, and that each of its\n * elements is of a specific type.\n */\nfunction tuple(Structs) {\n  const Never = never();\n  return new Struct({\n    type: 'tuple',\n    schema: null,\n    *entries(value) {\n      if (Array.isArray(value)) {\n        const length = Math.max(Structs.length, value.length);\n        for (let i = 0; i < length; i++) {\n          yield [i, value[i], Structs[i] || Never];\n        }\n      }\n    },\n    validator(value) {\n      return Array.isArray(value) || `Expected an array, but received: ${print(value)}`;\n    },\n    coercer(value) {\n      return Array.isArray(value) ? value.slice() : value;\n    }\n  });\n}\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\nfunction type(schema) {\n  const keys = Object.keys(schema);\n  return new Struct({\n    type: 'type',\n    schema,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k of keys) {\n          yield [k, value[k], schema[k]];\n        }\n      }\n    },\n    validator(value) {\n      return isNonArrayObject(value) || `Expected an object, but received: ${print(value)}`;\n    },\n    coercer(value) {\n      return isNonArrayObject(value) ? {\n        ...value\n      } : value;\n    }\n  });\n}\n/**\n * Ensure that a value matches one of a set of types.\n */\nfunction union(Structs) {\n  const description = Structs.map(s => s.type).join(' | ');\n  return new Struct({\n    type: 'union',\n    schema: null,\n    coercer(value, ctx) {\n      for (const S of Structs) {\n        const [error, coerced] = S.validate(value, {\n          coerce: true,\n          mask: ctx.mask\n        });\n        if (!error) {\n          return coerced;\n        }\n      }\n      return value;\n    },\n    validator(value, ctx) {\n      const failures = [];\n      for (const S of Structs) {\n        const [...tuples] = run(value, S, ctx);\n        const [first] = tuples;\n        if (!first[0]) {\n          return [];\n        } else {\n          for (const [failure] of tuples) {\n            if (failure) {\n              failures.push(failure);\n            }\n          }\n        }\n      }\n      return [`Expected the value to satisfy a union of \\`${description}\\`, but received: ${print(value)}`, ...failures];\n    }\n  });\n}\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\nfunction unknown() {\n  return define('unknown', () => true);\n}\n\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\nfunction coerce(struct, condition, coercer) {\n  return new Struct({\n    ...struct,\n    coercer: (value, ctx) => {\n      return is(value, condition) ? struct.coercer(coercer(value, ctx), ctx) : struct.coercer(value, ctx);\n    }\n  });\n}\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\nfunction defaulted(struct, fallback) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return coerce(struct, unknown(), x => {\n    const f = typeof fallback === 'function' ? fallback() : fallback;\n    if (x === undefined) {\n      return f;\n    }\n    if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n      const ret = {\n        ...x\n      };\n      let changed = false;\n      for (const key in f) {\n        if (ret[key] === undefined) {\n          ret[key] = f[key];\n          changed = true;\n        }\n      }\n      if (changed) {\n        return ret;\n      }\n    }\n    return x;\n  });\n}\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\nfunction trimmed(struct) {\n  return coerce(struct, string(), x => x.trim());\n}\n\n/**\n * Ensure that a string, array, map, or set is empty.\n */\nfunction empty(struct) {\n  return refine(struct, 'empty', value => {\n    const size = getSize(value);\n    return size === 0 || `Expected an empty ${struct.type} but received one with a size of \\`${size}\\``;\n  });\n}\nfunction getSize(value) {\n  if (value instanceof Map || value instanceof Set) {\n    return value.size;\n  } else {\n    return value.length;\n  }\n}\n/**\n * Ensure that a number or date is below a threshold.\n */\nfunction max(struct, threshold) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    exclusive\n  } = options;\n  return refine(struct, 'max', value => {\n    return exclusive ? value < threshold : value <= threshold || `Expected a ${struct.type} less than ${exclusive ? '' : 'or equal to '}${threshold} but received \\`${value}\\``;\n  });\n}\n/**\n * Ensure that a number or date is above a threshold.\n */\nfunction min(struct, threshold) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    exclusive\n  } = options;\n  return refine(struct, 'min', value => {\n    return exclusive ? value > threshold : value >= threshold || `Expected a ${struct.type} greater than ${exclusive ? '' : 'or equal to '}${threshold} but received \\`${value}\\``;\n  });\n}\n/**\n * Ensure that a string, array, map or set is not empty.\n */\nfunction nonempty(struct) {\n  return refine(struct, 'nonempty', value => {\n    const size = getSize(value);\n    return size > 0 || `Expected a nonempty ${struct.type} but received an empty one`;\n  });\n}\n/**\n * Ensure that a string matches a regular expression.\n */\nfunction pattern(struct, regexp) {\n  return refine(struct, 'pattern', value => {\n    return regexp.test(value) || `Expected a ${struct.type} matching \\`/${regexp.source}/\\` but received \"${value}\"`;\n  });\n}\n/**\n * Ensure that a string, array, number, date, map, or set has a size (or length, or time) between `min` and `max`.\n */\nfunction size(struct, min) {\n  let max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : min;\n  const expected = `Expected a ${struct.type}`;\n  const of = min === max ? `of \\`${min}\\`` : `between \\`${min}\\` and \\`${max}\\``;\n  return refine(struct, 'size', value => {\n    if (typeof value === 'number' || value instanceof Date) {\n      return min <= value && value <= max || `${expected} ${of} but received \\`${value}\\``;\n    } else if (value instanceof Map || value instanceof Set) {\n      const {\n        size\n      } = value;\n      return min <= size && size <= max || `${expected} with a size ${of} but received one with a size of \\`${size}\\``;\n    } else {\n      const {\n        length\n      } = value;\n      return min <= length && length <= max || `${expected} with a length ${of} but received one with a length of \\`${length}\\``;\n    }\n  });\n}\n/**\n * Augment a `Struct` to add an additional refinement to the validation.\n *\n * The refiner function is guaranteed to receive a value of the struct's type,\n * because the struct's existing validation will already have passed. This\n * allows you to layer additional validation on top of existing structs.\n */\nfunction refine(struct, name, refiner) {\n  return new Struct({\n    ...struct,\n    *refiner(value, ctx) {\n      yield* struct.refiner(value, ctx);\n      const result = refiner(value, ctx);\n      const failures = toFailures(result, ctx, struct, value);\n      for (const failure of failures) {\n        yield {\n          ...failure,\n          refinement: name\n        };\n      }\n    }\n  });\n}\nexport { Struct, StructError, any, array, assert, assign, bigint, boolean, coerce, create, date, defaulted, define, deprecated, dynamic, empty, enums, func, instance, integer, intersection, is, lazy, literal, map, mask, max, min, never, nonempty, nullable, number, object, omit, optional, partial, pattern, pick, record, refine, regexp, set, size, string, struct, trimmed, tuple, type, union, unknown, validate };","map":{"version":3,"names":["StructError","TypeError","constructor","failure","failures","cached","message","explanation","rest","path","msg","length","join","cause","Object","assign","name","isIterable","x","isObject","Symbol","iterator","isNonArrayObject","Array","isArray","isPlainObject","prototype","toString","call","getPrototypeOf","print","value","JSON","stringify","shiftIterator","input","done","next","undefined","toFailure","result","context","struct","branch","type","refinement","key","toFailures","r","run","options","arguments","coerce","mask","ctx","coercer","status","validator","k","v","s","entries","ts","t","Map","set","Set","add","refiner","Struct","props","schema","assert","create","is","validate","tuples","tuple","error","_len","Structs","_key","isType","schemas","map","object","define","deprecated","log","dynamic","fn","lazy","omit","keys","subschema","partial","isStruct","optional","pick","console","warn","any","array","Element","i","slice","bigint","boolean","date","Date","isNaN","getTime","enums","values","description","includes","func","instance","Class","integer","Number","isInteger","intersection","S","literal","constant","Key","Value","never","nullable","number","knowns","Never","unknowns","delete","coerced","record","regexp","RegExp","string","Math","max","union","first","push","unknown","condition","defaulted","fallback","f","strict","ret","changed","trimmed","trim","empty","refine","size","getSize","threshold","exclusive","min","nonempty","pattern","test","source","expected","of"],"sources":["../src/error.ts","../src/utils.ts","../src/struct.ts","../src/structs/utilities.ts","../src/structs/types.ts","../src/structs/coercions.ts","../src/structs/refinements.ts"],"sourcesContent":[null,null,null,null,null,null,null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}